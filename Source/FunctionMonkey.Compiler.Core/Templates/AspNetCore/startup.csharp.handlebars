using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AzureFromTheTrenches.Commanding;
using AzureFromTheTrenches.Commanding.Abstractions;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using FunctionMonkey.AspNetCore;

namespace {{{Namespace}}}
{
    public class Startup
    {
        private IServiceProvider _serviceProvider;
        
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            {{Namespace}}.ReferenceLinkBack.ForceLinkBack();
            FunctionMonkey.Runtime.InitializeFromStartup(services);

            services.AddControllers();

            {{#if UsesTokenValidation}}
            services
                .AddAuthentication(x =>
                    {
                        x.DefaultAuthenticateScheme = TokenValidationDefaults.AuthenticationScheme;
                        x.DefaultChallengeScheme = TokenValidationDefaults.AuthenticationScheme;
                    }
                )
                .AddTokenValidation();
            {{/if}}
            services.AddAuthorization();
    
            {{#if OpenApiEnabled}}
            services.AddSwaggerGen(c => {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "{{{OpenApiTitle}}}", Version = "{{{OpenApiVersion}}}" });
            });
            {{/if}}
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            _serviceProvider = app.ApplicationServices;
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            {{#if OpenApiEnabled}}
            app.UseSwagger();
            app.UseSwaggerUI(c => { c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"); });
            {{/if}}
            app.UseRouting();
            {{#if UsesTokenValidation}}
            app.UseAuthentication();
            app.UseAuthorization();
            {{/if}}
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}