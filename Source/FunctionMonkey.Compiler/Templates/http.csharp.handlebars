using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using FunctionMonkey.Abstractions.Builders.Model;

namespace {{Namespace}}
{
    public static class {{Name}}
    {
        [FunctionName("{{Name}}")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(
                {{{azureAuthenticationType}}},
                {{{httpVerbs}}}
                {{#if HasRoute}},Route = "{{Route}}"{{/if}}
                )
            ]
            HttpRequest req,
            ILogger log,
            ExecutionContext executionContext
            {{#each RouteParameters}}
            , string {{RouteName}}
            {{/each}}
            {{{parameterOutputBinding}}}
    )
        {
            log.LogInformation("HTTP trigger function {{Name}} processed a request.");

            FunctionMonkey.Runtime.FunctionProvidedLogger.Value = log;
            FunctionMonkey.PluginFunctions pluginFunctions = FunctionMonkey.Runtime.PluginFunctions["{{Name}}"];

            string requestUrl = GetRequestUrl(req);
            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetExecutionContext(executionContext.FunctionDirectory,
                executionContext.FunctionAppDirectory,
                executionContext.FunctionName,
                executionContext.InvocationId);
            var headerDictionary = new Dictionary<string, IReadOnlyCollection<string>>();
            foreach (var headerKeyValuesPair in req.Headers)
            {
                string[] values = headerKeyValuesPair.Value.ToArray();
                headerDictionary.Add(headerKeyValuesPair.Key, values);
            }
            contextSetter.SetHttpContext(null, requestUrl, headerDictionary);

            System.Security.Claims.ClaimsPrincipal principal = null;
            // If we validate tokens then we need to read the header, validate it and retrieve a claims principal. Returning unauthorized if
            // there are any issues
            {{#if ValidatesToken}}
            if (req.Headers["{{TokenHeader}}"].Count == 0)
            {
                return new UnauthorizedResult();
            }
            string authorizationHeader = req.Headers["{{TokenHeader}}"][0];
            if (string.IsNullOrWhiteSpace(authorizationHeader))
            {
                return new UnauthorizedResult();
            }
            
            principal = await pluginFunctions.ValidateToken(authorizationHeader);
            if (principal == null)
            {
                return new UnauthorizedResult();
            }
            contextSetter.SetHttpContext(principal, requestUrl, headerDictionary);    
            {{/if}}

            {{#if AuthorizesClaims}}
            var claimsPrincipalAuthorizationResult = await pluginFunctions.IsAuthorized(principal, req.Method, requestUrl);
            if (!claimsPrincipalAuthorizationResult)
            {
                return new UnauthorizedResult();
            }
            {{/if}}

            {{CommandTypeName}} command;
            string contentType = req.ContentType?.ToLower() ?? "application/json";
            {{#if IsStreamCommand}}
                command = new {{CommandTypeName}}() {
                    Stream = req.Body
                };
            {{else}}
            if (contentType.Split(';').Any(x => x.Trim().Equals("application/json", System.StringComparison.InvariantCultureIgnoreCase)))
            {
                string requestBody = new StreamReader(req.Body).ReadToEnd();
                
                if (!System.String.IsNullOrWhiteSpace(requestBody))
                {
                    try
                    {
                        command = ({{CommandTypeName}})pluginFunctions.Deserialize(requestBody);
                    }
                    catch(FunctionMonkey.DeserializationException dex)
                    {
                        if (dex.LineNumber != -1)
                        {
                            System.Text.StringBuilder sbError = new System.Text.StringBuilder("Invalid type in message body at line ");
                            sbError.Append(dex.LineNumber);
                            sbError.Append(" for path ");
                            sbError.Append(dex.Path);
                            return CreateBadParameterResponse(sbError.ToString());
                        }
                        else
                        {
                            return CreateBadParameterResponse(dex.Message);
                        }
                    }
                }
                else
                {
                    command = CreateNewCommand();
                }
            }
            else
            {
                command = CreateNewCommand();
            }
            {{/if}}

            {{#each PossibleFormProperties}}
                command.{{Name}} = req.Form;
            {{/each}}

            {{#if UsesImmutableTypes}}
                Dictionary<string, object> imtPropertyValues = new Dictionary<string, object>();
            {{/if}}

            Microsoft.Extensions.Primitives.StringValues queryParameterValues;
            {{#each QueryParameters}}
                {{#unless IsFormCollection}}
                    if (req.Query.TryGetValue("{{Name}}", out queryParameterValues))
                    {

                        {{#if IsCollection}}
                            {{#if IsCollectionArray}}
                                var collection = new {{{DiscreteTypeName}}}[queryParameterValues.Count];
                                int queryParameterArrayIndex = 0;
                            {{else}}
                                var collection = new {{{CollectionInstanceTypeName}}}();
                            {{/if}}
                        {{/if}}
                        foreach(string queryParameterValue in queryParameterValues)
                        {
                            {{{DiscreteTypeName}}} parsedValue = default({{{DiscreteTypeName}}});
                
                            {{#if IsString}}
                            parsedValue = queryParameterValue;
                            {{else if IsEnum}}
                            {
                                if (!System.Enum.TryParse<{{DiscreteTypeName}}>(queryParameterValue, out parsedValue))
                                {
                                    return CreateBadParameterResponse("Invalid type for query parameter {{{Name}}}");
                                }
                            }
                            {{else if IsNullable}}
                            {
                                {{#if IsNullableTypeHasTryParseMethod}}
                                    if (queryParameterValue != null)
                                    {
                                        if(!TryParseNullable(queryParameterValue, {{NullableType}}.TryParse, out parsedValue))
                                        {
                                            return CreateBadParameterResponse("Invalid type for query parameter {{{Name}}}");
                                        }
                                    }
                                {{/if}}
                            }
                            {{else}}
                                if (!{{DiscreteTypeName}}.TryParse(queryParameterValue, out parsedValue))
                                {
                                    return CreateBadParameterResponse("Invalid type for query parameter {{{Name}}}");
                                }
                            {{/if}}
                
                            {{#if IsCollection}}
                                {{#if IsCollectionArray}}
                                    collection[queryParameterArrayIndex] = parsedValue;
                                    queryParameterArrayIndex++;
                                {{else}}
                                    collection.Add(parsedValue);
                                {{/if}}
                            {{else}}
                                {{#if ../UsesImmutableTypes}}
                                    imtPropertyValues["{{Name}}"] = parsedValue;
                                {{else}}
                                    command.{{Name}} = parsedValue;
                                {{/if}}                             
                                break;
                            {{/if}}
                        }
                
                        {{#if IsCollection}}
                            {{#if ../UsesImmutableTypes}}
                                imtPropertyValues["{{Name}}"] = collection;
                            {{else}}
                                command.{{Name}} = collection;
                            {{/if}}
                        {{/if}}
                    }
                {{/unless}}
            {{/each}}
            
            {{#if HeaderBindingConfiguration}}
                string headerName;
                {{#each QueryParameters}}
                    {{#unless IsFormCollection}}
                        headerName = "{{{mappedHeaderNameForProperty ../HeaderBindingConfiguration}}}";
                        if (!string.IsNullOrWhiteSpace(headerName))
                        {
                        if (req.Headers.TryGetValue(headerName, out var stringValues))
                        {
                        string headerValue = stringValues.FirstOrDefault();
                        {{#if IsString}}
                            {{#if ../UsesImmutableTypes}}
                                imtPropertyValues["{{Name}}"] = headerValue;
                            {{else}}
                                command.{{Name}} = headerValue;
                            {{/if}}
                        {{else if IsEnum}}
                            {
                                {{{TypeName}}} result;
                                if (System.Enum.TryParse<{{TypeName}}>(headerValue, out result))
                                {
                                    {{#if ../UsesImmutableTypes}}
                                        imtPropertyValues["{{Name}}"] = result;
                                    {{else}}
                                        command.{{Name}} = result;
                                    {{/if}}
                                }
                            }
                        {{else if IsNullable}}
                            {{#if IsNullableTypeHasTryParseMethod}}
                                {
                                    {{{TypeName}}} nullableValue;
                                    if(TryParseNullable(headerValue, {{NullableType}}.TryParse, out nullableValue))
                                    {
                                        {{#if ../UsesImmutableTypes}}
                                            imtPropertyValues["{{Name}}"] = nullableValue;
                                        {{else}}
                                            command.{{Name}} = nullableValue;
                                        {{/if}}
                                    }
                                }
                            {{/if}}
                        {{else}}
                            {{TypeName}}.TryParse(headerValue, out var candidate);
                            {{#if ../UsesImmutableTypes}}
                                imtPropertyValues["{{Name}}"] = candidate;
                            {{else}}
                                command.{{Name}} = candidate;
                            {{/if}}
                        {{/if}}
                        }
                        }
                    {{/unless}}
                {{/each}}
            {{/if}}

            {{#each RouteParameters}}
                {{#if IsString}}
                    {{#if ../UsesImmutableTypes}}
                        imtPropertyValues["{{Name}}"] = {{RouteName}};
                    {{else}}
                        command.{{Name}} = {{RouteName}};
                    {{/if}}
                {{else if IsEnum}}
                    {
                        {{{RouteTypeName}}} result;
                        if (System.Enum.TryParse<{{RouteTypeName}}>({{RouteName}}, out result))
                        {
                            {{#if ../UsesImmutableTypes}}
                                imtPropertyValues["{{Name}}"] = result;
                            {{else}}
                                command.{{Name}} = result;
                            {{/if}}
                        }
                        else
                        {
                            return CreateBadParameterResponse("Invalid type for route parameter {{{RouteName}}}");
                        }
                    }
                {{else if IsNullable}}
                    {
                    {{#if IsNullableTypeHasTryParseMethod}}
                        {
                            {{{RouteTypeName}}} nullableValue;
                            if ({{RouteName}} != null)
                            {
                                if(TryParseNullable({{RouteName}}, {{NullableType}}.TryParse, out nullableValue))
                                {
                                    {{#if ../UsesImmutableTypes}}
                                        imtPropertyValues["{{Name}}"] = nullableValue;
                                    {{else}}
                                        command.{{Name}} = nullableValue;
                                    {{/if}}
                                }
                                else
                                {
                                    return CreateBadParameterResponse("Invalid type for route parameter {{{RouteName}}}");
                                }
                            }
                        }
                    {{/if}}
                    }
                {{else if IsDiscriminatedUnion}}
                    {
                        return CreateBadParameterResponse("Unions not yet supported for route parameters");
                        //{{{DiscriminatedUnionUnderlyingTypeName}}} discriminatedUnionValue = pluginFunctions.ParseFromString<{{{RouteTypeName}}}>({{RouteName}}));
                    }
                {{else}}
                    if ({{TypeName}}.TryParse({{RouteName}}, out var candidate))
                    {
                        {{#if ../UsesImmutableTypes}}
                            imtPropertyValues["{{Name}}"] = candidate;
                        {{else}}
                            command.{{Name}} = candidate;
                        {{/if}}
                    }
                    else
                    {
                        return CreateBadParameterResponse("Invalid type for route parameter {{{RouteName}}}");
                    }
                {{/if}}
            {{/each}}

            {{#if UsesImmutableTypes}}
                command = MergeCommandWithParameters(imtPropertyValues, command);
            {{/if}}
    
            {{#if ValidatesToken}}
            {{#unless CommandTypeIsUnit}}    
            command = ({{{CommandTypeName}}})(await pluginFunctions.BindClaims(principal, command));
            {{/unless}}    
            {{/if}}

            {{#if IsUsingValidator}}
            {{#unless CommandTypeIsUnit}}
            var validationResult = pluginFunctions.Validate(command);
            if (!pluginFunctions.IsValid(validationResult))
            {
                {{#if HasHttpResponseHandler}}
                    var validatorResponseTask = pluginFunctions.CreateValidationFailureResponse(command, validationResult);
                    var handledValidationResponse = validatorResponseTask != null ? (await validatorResponseTask) : null;
                    return handledValidationResponse ?? CreateResponse(400, validationResult, pluginFunctions);
                {{else}}
                    return CreateResponse(400, validationResult, pluginFunctions);
                {{/if}}
            }
            {{/unless}}
            {{/if}}

            {{#if OutputBinding}}
                {{#if NoCommandHandler}}
                    {{{CommandTypeName}}} result = command;
                {{else}}
                    {{#if IsFunctionalFunction}}
                        Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>> handler = (Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>>)pluginFunctions.Handler;
                        {{#if FunctionHandlerIsAsync}}
                            var result = await handler(command);
                        {{else}}
                            var result = handler(command);
                        {{/if}}
                    {{else}}
                        {{{CommandResultTypeName}}} result = (await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command)).Result;
                    {{/if}}
                {{/if}}
                
                {{{collectorOutputBinding}}}
            
                {{#if ReturnResponseBodyWithOutputBinding}}
                    log.LogWarning("0");
                    log.LogWarning("{command}", command);
                    log.LogWarning("{result}", result);
                    var responseTask = pluginFunctions.CreateResponseForResult(command, result);
                    log.LogWarning("1");
                    var handledResponse = responseTask != null ? (await responseTask) : null;
                    log.LogWarning("2");
                    return handledResponse ?? {{#if ResultIsFSharpUnit}}new OkResult(){{else}}CreateResponse(200, result, pluginFunctions){{/if}};
                {{else}}
                    return new NoContentResult();
                {{/if}}
                
            {{else}}            
            try
            {
                {{#if IsFunctionalFunction}}
                    Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>> handler = (Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>>)pluginFunctions.Handler;
                    {{#if FunctionHandlerIsAsync}}
                        var result = await handler(command);
                    {{else}}
                        var result = handler(command);
                    {{/if}}
                {{else}}
                    {{#if CommandHasResult}}
                        var result = (await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command)).Result;
                    {{else}}
                        await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
                    {{/if}}
                {{/if}}             
                {{#if CommandHasResult}}
                    {{#if HasHttpResponseHandler}}
                        {{#if IsValidationResult}}
                            FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult validationResult = (FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult)result;
                            if (!validationResult.IsValid)
                            {
                                var validatorResponseTask = pluginFunctions.CreateValidationFailureResponse(command, validationResult);
                                var handledValidationResponse = validatorResponseTask != null ? (await responseTask) : null;
                                return handledValidationResponse ?? CreateResponse(400, validationResult, pluginFunctions);
                            }
                            else
                            {
                                var responseTask = pluginFunctions.CreateResponseForResult(command, result);
                                var handledResponse = responseTask != null ? (await responseTask) : null;
                                return handledResponse ?? CreateResponse(200, result, pluginFunctions);
                            }
                        {{else}}
                            var responseTask = pluginFunctions.CreateResponseForResult(command, result);
                            var handledResponse = responseTask != null ? (await responseTask) : null;
                            return handledResponse ?? {{#if ResultIsFSharpUnit}}new OkResult(){{else}}CreateResponse(200, result, pluginFunctions){{/if}};
                        {{/if}}                        
                    {{else}}
                        {{#if IsValidationResult}}
                            FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult validationResult = (FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult)result;
                            if (!validationResult.IsValid)
                            {
                                return CreateResponse(400, validationResult, pluginFunctions);
                            }
                        {{/if}}
                        return {{#if ResultIsFSharpUnit}}new OkResult(){{else}}CreateResponse(200, result, pluginFunctions){{/if}};
                    {{/if}}
                {{else}}
                    // We don't need to cover this branch for F# as all handlers have results
                    {{#if HasHttpResponseHandler}}
                        var responseTask = pluginFunctions.CreateResponse(command);
                        var handledResponse = responseTask != null ? (await responseTask) : null; 
                        return handledResponse ?? new OkResult();
                    {{else}}
                        return new OkResult();
                    {{/if}}
                {{/if}}
            }
            catch(System.Exception ex)
            {
                {{#if HasHttpResponseHandler}}
                    var responseTask = pluginFunctions.CreateResponseFromException(command, ex);
                    var handledResponse = responseTask != null ? (await responseTask) : null;
                    return handledResponse ?? CreateResponse(500, "Unexpected error", pluginFunctions);
                {{else}}
                    log.LogError(ex, $"Error occurred executing command {command.GetType().Name}");
                    return CreateResponse(500, "Unexpected error", pluginFunctions);
                {{/if}}
            }
            {{/if}}
        }

        public static IActionResult CreateResponse(int code, object content, FunctionMonkey.PluginFunctions pluginFunctions)
        {
            ContentResult result = new ContentResult();
            result.Content = pluginFunctions.Serialize(content, true);
            result.ContentType = "application/json";
            result.StatusCode = code;
            return result;
        }

        public static IActionResult CreateBadParameterResponse(string message)
        {
            ContentResult result = new ContentResult();
            result.Content = message;
            result.ContentType = "text/plain";
            result.StatusCode = 400;
            return result;
        }

        private static string GetRequestUrl(HttpRequest request)
        {
          string str1 = request.Host.Value;
          string str2 = request.PathBase.Value;
          string str3 = request.Path.Value;
          string str4 = request.QueryString.Value;
          return new System.Text.StringBuilder(request.Scheme.Length + "://".Length + str1.Length + str2.Length + str3.Length + str4.Length).Append(request.Scheme).Append("://").Append(str1).Append(str2).Append(str3).Append(str4).ToString();
        }
    
        public delegate System.Boolean TryDelegate<T>(System.String input, out T result);

        private static System.Boolean TryParseNullable<T>(
            System.String input,
            TryDelegate<T> tryFunction,
            out System.Nullable<T> result) where T : struct
        {
            T temp;
            System.Boolean success = tryFunction(input, out temp);
            result = temp;

          return success;
        }
                        
        private static {{CommandTypeName}} CreateNewCommand()
        {
            {{#if UsesImmutableTypes}}
                {{#if CommandTypeIsUnit}}
                    return null;
                {{else}}    
                return new {{CommandTypeName}}(
                    {{#each ImmutableTypeConstructorParameters}}
                        default({{{TypeName}}}){{#unless @last}},{{/unless}}
                    {{/each}}
                );
                {{/if}}    
            {{else}}
                return new {{CommandTypeName}}();
            {{/if}}
        }

        {{#if UsesImmutableTypes}}
        private static {{{CommandTypeName}}} MergeCommandWithParameters(Dictionary<string, object> values, {{{CommandTypeName}}} originalCommand)
        {
            {{#if CommandTypeIsUnit}}
                return null;
            {{else}}
            return new {{CommandTypeName}}(
            {{#each ImmutableTypeConstructorParameters}}
                values.TryGetValue("{{Name}}", out object uncastValue{{@index}}) ? ({{{TypeName}}})uncastValue{{@index}} : originalCommand.{{Name}}{{#unless @last}},{{/unless}}
            {{/each}}
            );
            {{/if}}
        }
        {{/if}}
    }    
}
