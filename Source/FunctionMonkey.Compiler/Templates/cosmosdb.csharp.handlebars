using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.Documents;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace {{Namespace}}
{
    public static class {{Name}}
    {
        [FunctionName("{{Name}}")]
        public static async Task Run(
            [CosmosDBTrigger(databaseName: "{{DatabaseName}}"
                             ,collectionName: "{{CollectionName}}"
                             ,ConnectionStringSetting = "{{ConnectionStringName}}"
                             ,LeaseCollectionName="{{LeaseCollectionName}}"
                             ,LeaseConnectionStringSetting="{{LeaseConnectionStringName}}"
                             {{#if LeaseCollectionPrefix}},LeaseCollectionPrefix="{{LeaseCollectionPrefix}}"{{/if}}
                             {{#if MaxItemsPerInvocation}},MaxItemsPerInvocation={{MaxItemsPerInvocation}}{{/if}}
                             {{#if FeedPollDelay}},FeedPollDelay={{FeedPollDelay}}{{/if}}
                             {{#if LeaseAcquireInterval}},LeaseAcquireInterval={{LeaseAcquireInterval}}{{/if}}
                             {{#if LeaseExpirationInterval}},LeaseExpirationInterval={{LeaseExpirationInterval}}{{/if}}
                             {{#if LeaseRenewInterval}},LeaseRenewInterval={{LeaseRenewInterval}}{{/if}}
                             {{#if CheckpointFrequency}},CheckpointFrequency={{CheckpointFrequency}}{{/if}}
                             {{#if LeasesCollectionThroughput}},LeasesCollectionThroughput={{LeasesCollectionThroughput}}{{/if}}
            )]
            IReadOnlyList<Document> input,
            ILogger log,
            ExecutionContext executionContext)
        {
            log.LogInformation("Cosmos change feed trigger function {{Name}} processed a request.");            
            
            {{#if IsDocumentBatchCommand}}
                {{CommandTypeName}} command = new {{CommandTypeName}}();
                command.Documents = input;
                var result = await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
                // The result will be useful when we want to include outputs too
            {{else}}
                {{#if ErrorHandlerTypeName}}
                Lazy<{{ErrorHandlerTypeName}}> errorHandler = new Lazy<{{ErrorHandlerTypeName}}>(
                    () => ({{ErrorHandlerTypeName}})FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{ErrorHandlerTypeName}}))                                                                               
                );
                {{/if}}
                foreach(Document document in input)
                {
                    try
                    {
                        {{CommandTypeName}} command = null;
                        {{#if IsDocumentCommand}}
                            command = new {{CommandTypeName}}();
                            command.Document = document;
                        {{else}}
                            {{#if ConvertToPascalCase}}
                                string json = document.ToString();
                                command = JsonConvert.DeserializeObject<{{CommandTypeName}}>(json);  
                            {{else}}
                                command = new {{CommandTypeName}}();
                                {{#each CommandProperties}}
                                    command.{{Name}} = document.GetPropertyValue<{{TypeName}}>("{{CosmosPropertyName}}");
                                {{/each}}
                            {{/if}}
                        {{/if}}

                        var result = await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
                        // The result will be useful when we want to include outputs too
                    }
                    catch(Exception ex)
                    {
                        {{#if ErrorHandlerTypeName}}
                            bool shouldContinue = await errorHandler.Value.HandleError(ex, document);
                            if (!shouldContinue)
                            {
                                break;
                            }
                        {{else}}
                            log.LogError(ex, "Error occurred processing document with id {Id}", document.Id);
                        {{/if}}
                    }
                }
            {{/if}}
        }
    }
}
