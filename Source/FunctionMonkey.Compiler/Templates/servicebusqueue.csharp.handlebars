using System;
using Microsoft.Azure.ServiceBus;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}
{
    public static class {{Name}}
    {
        [FunctionName("{{Name}}")]
        public static async Task Run(
            [ServiceBusTrigger("{{QueueName}}", Connection="{{ConnectionStringName}}")]
            Message queueItem,
            int deliveryCount,
            DateTime enqueuedTimeUtc,
            string messageId,
            ILogger log,
            ExecutionContext executionContext)
        {
            log.LogInformation("Service bus queue trigger function {{Name}} processed a request.");
            FunctionMonkey.Runtime.FunctionProvidedLogger.Value = log;

            string body = System.Text.Encoding.UTF8.GetString(queueItem.Body);
            {{CommandTypeName}} command;
            if (!System.String.IsNullOrWhiteSpace(body))
            {
                var serializer = (FunctionMonkey.Abstractions.ISerializer)
                    FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{CommandDeseriaizerTypeName}}));
                command = serializer.Deserialize<{{CommandTypeName}}>(body, false); // we don't enforce security properties from message buses
            }
            else
            {
                command = new {{CommandTypeName}}();
            }

            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetServiceBusContext(deliveryCount, enqueuedTimeUtc, messageId, queueItem.SystemProperties.LockToken);
            contextSetter.SetExecutionContext(executionContext.FunctionDirectory,
                executionContext.FunctionAppDirectory,
                executionContext.FunctionName,
                executionContext.InvocationId);

            {{#if IsUsingValidator}}
            var validator = (FunctionMonkey.Abstractions.Validation.IValidator)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.Validation.IValidator));
            var validationResult = validator.Validate(command);
            if (!validationResult.IsValid)
            {
                throw new FunctionMonkey.Commanding.Abstractions.Validation.ValidationException("{{Name}}", validationResult, messageId);
            }
            {{/if}}
            
            var result = await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
            // The result will be useful when we want to include outputs too
        }
    }
}
